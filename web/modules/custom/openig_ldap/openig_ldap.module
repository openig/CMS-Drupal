<?php

use Drupal\user\UserInterface;
use Drupal\simplenews\Entity\Subscriber;
use Symfony\Component\Ldap\Entry;

function openig_ldap_ldap_user_edit_user_alter(UserInterface $account, Entry $entry, array $context) {

    /** @var \Drupal\ldap_servers\Processor\TokenProcessor $tokenProcessor */
    $tokenProcessor = \Drupal::service('ldap.token_processor');

    // dump($account);
    // $value = $tokenProcessor->ldapEntryReplacementsForDrupalAccount($entry, '[sn]');
    // $account->set('field_phone', "02 XX XX XX XX");

    // 1 - synchro des réseaux sociaux
    $platforms = \Drupal::service('plugin.manager.social_media_links.platform')->getPlatforms();
    $platform_settings = $account->get('field_social_network')->getFieldDefinition()->getSetting('platforms');
    //
    $new_values = array();
    $new_values[] = [ 
      "platform" => null,
      "value" => null,
      "platform_values" => [
/*
        "instagram" => [
          "value" => $tokenProcessor->ldapEntryReplacementsForDrupalAccount($entry, '[instagram]')
        ],
        "facebook" => [
          "value" => $tokenProcessor->ldapEntryReplacementsForDrupalAccount($entry, '[facebook]')
        ],
        "linkedin" => [
          "value" => $tokenProcessor->ldapEntryReplacementsForDrupalAccount($entry, '[linkedin]')
        ],
        "twitter" => [
          "value" => $tokenProcessor->ldapEntryReplacementsForDrupalAccount($entry, '[twitter]')
        ],
        "github" => [
          "value" => $tokenProcessor->ldapEntryReplacementsForDrupalAccount($entry, '[github]')
        ],
        "bluesky" => [
          "value" => $tokenProcessor->ldapEntryReplacementsForDrupalAccount($entry, '[bluesky]')
        ]
*/
      ]
    ];
    foreach ($platforms as $platform_id => $platform) {
        if (isset($platform_settings[$platform_id]['enabled']) && $platform_settings[$platform_id]['enabled']) {
            $ldap_value = $tokenProcessor->ldapEntryReplacementsForDrupalAccount($entry, '['.$platform_id.']');
            if(strpos($ldap_value, $platform['urlPrefix']) === 0) {
                $ldap_value = substr($ldap_value, strlen($platform['urlPrefix']));
            }
            $new_values[0]["platform_values"][$platform_id] = ["value" => $ldap_value];
        }
    }
    $account->set('field_social_network', $new_values);
 
 
    // TODO 2 - synchro de la structure d'appartenance
    // ! si adhésionIndividuelle activée -> rattacher à la structure d'adhésion individuelle : openig-adherents-personnes-physiques
    //
    // dump( $tokenProcessor->ldapEntryReplacementsForDrupalAccount($entry, '[structureUid]') );
    // dump( $account->get('field_structure') );
  
    $individual = $tokenProcessor->ldapEntryReplacementsForDrupalAccount($entry, '[individualAdhesion]');
    if(isset($individual) && $individual !== null && $individual) {
        $structureUid = "openig-adherents-personnes-physiques";
    } else {
        $structureUid = $tokenProcessor->ldapEntryReplacementsForDrupalAccount($entry, '[structureUid]'); // TODO ; get memberOf
    }
  
    $storage = \Drupal::entityTypeManager()->getStorage('node');
    $structures = $storage->loadByProperties(['type' => 'structure', 'field_ldap_cn' => $structureUid]);
    if(!empty($structures)) {
        // associate user with structure
        $account->set('field_structure', array_values($structures)[0]->nid->value );
    } else {
        // else delete structure association
        $account->set('field_structure', null );
    }

  // 3 - rattachement à la newsletter (si création d'un nouveau user)
  if ($account->isNew()) {
    // Create subscriber
    // $subscriber = Subscriber::loadByUid($account->id());
    $subscriber = Subscriber::loadByMail($account->getEmail(), 'create');
    $subscriber->fillFromAccount($account)->save();
    
    // Associate subscriber to newsletter
    $subscriber->subscribe('default');
    $subscriber->save();
  }

  // die();
}

function openig_ldap_cron() {
    $storage = \Drupal::entityTypeManager()->getStorage('node');

    $query = \Drupal::service('ldap.query');
    $query->load('all_structures');
    $query->execute();
    $results = $query->getRawResults();
    dump($results);
    foreach($results as $ldap_structure) {
        $attributes = $ldap_structure->getAttributes();
        dump($attributes);
    
        $structures = $storage->loadByProperties(['type' => 'structure', 'field_ldap_cn' => $attributes['cn'][0]]);
        if(!empty($structures)) {
            // update structure
            $structure = reset($structures);
        } else {
            // else create structure
            $structure = $storage->create(['type' => 'structure', 'field_ldap_cn' => $attributes['cn'][0]]);
        }

        $structure->set('field_address', $attributes['postalAddress'][0]);
        $structure->set('field_postcode', $attributes['postalCode'][0]);
        $structure->set('field_city', $attributes['l'][0]);

        $structure->set('field_phone', $attributes['telephoneNumber'][0]);
        $structure->set('field_email', $attributes['mail'][0]);
        $structure->set('field_website', $attributes['siteWeb'][0]);
        $structure->set('field_siret', $attributes['businessCategory'][0]);

        $structure->set('body', $attributes['description'][0]);

        // TODO Taxonomie
        // $structure->set('field_typologie_structure', $attributes['typologie'][0]);

        // TODO Taxonomie
        // $structure->set('field_dpt_intervention', $attributes['departements'][0]);

        // TODO Fichier image
        // $structure->set('field_image', $attributes['logoFile'][0]);


        $structure->save();
        
//        $structureUid = $tokenProcessor->ldapEntryReplacementsForDrupalAccount($entry, '[structureUid]'); // TODO ; get memberOf
    }
    die();
}

