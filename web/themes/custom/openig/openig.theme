<?php
use Drupal\node\Entity\Node;
/**
 * @file
 * OPenIG theme file.
 */

function openig_preprocess_field__node(&$variables){
  if($variables['field_name'] == 'title'){
    // Récupération des tags au niveau du titre du contenu
    $tags = $variables['element']['#object']->field_tag;
    foreach ($tags as $tag) {
      $term = \Drupal\taxonomy\Entity\Term::load($tag->target_id);
      $variables['tags'][$term->tid[0]->value] = $term->name[0]->value;
    }
    // Utilisation d'une taxonomie pour afficher les pictos à côté des titres dans les types de contenu
    $type = $variables['element']['#bundle'];
    $pictos = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'pictos_titre', 'field_type_de_contenu' => $type]);
    if($pictos){
      $first_element = reset($pictos);
      if($first_element){
        $file_picto =  \Drupal::entityTypeManager()->getStorage('file')->load($first_element->field_picto[0]->target_id);
        $variables['picto_uri'] = $file_picto->get('uri')[0]->value;
        $variables['picto_alt'] = $first_element->field_picto[0]->alt;
      }
    }
  }
}

function openig_preprocess_page_title(&$variables) {
  // Utilisation d'une taxonomie pour afficher les pictos à côté des titres dans les vues
  $route = \Drupal::routeMatch()->getCurrentRouteMatch()->getRouteObject();
  if($route->getDefault('_controller') == 'Drupal\views\Routing\ViewPageController::handle'){
    $id = $route->getDefault('view_id');
    $pictos = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'pictos_titre', 'field_vue' => $id]);
    if($pictos){
      $first_element = reset($pictos);
      if($first_element){
        $file_picto =  \Drupal::entityTypeManager()->getStorage('file')->load($first_element->field_picto[0]->target_id);
        $variables['picto_uri'] = $file_picto->get('uri')[0]->value;
        $variables['picto_alt'] = $first_element->field_picto[0]->alt;
      }
    }
  }
}


function openig_preprocess_node(&$variables, $hook){
  $type = $variables['node']->getType();

  switch($type) {
    case "groupe_de_travail":
      $variables['ressources'] = array();
      $nid = $variables['node']->nid->value;
      // Récupération des ressources du groupe de travail
      $database = \Drupal::database();
      $query = $database->query("SELECT f.entity_id FROM {node} n JOIN {node__field_linked_content} f ON f.field_linked_content_target_id = n.nid WHERE f.field_linked_content_target_id = '".$nid."'");
      $result = $query->fetchAll();
      $ressourcesCheck = [];
      // Récupération des types de ressources
      $types = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'type_de_ressource']);

      // Création d'un tableau avec les types de ressources
      foreach ($types as $type) {
        $name = $type->name[0]->value;
        $variables['ressources'][$name] = [];
        ksort($variables['ressources']);
      }
      foreach ($result as $ressource) {
        $node_check = \Drupal\node\Entity\Node::load($ressource->entity_id);
        $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
        // Check si la ressource est insaccessible
        $check = $node_check->access('view', $user);

        /** @var \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $referenceItem */
        $referenceItem = $node_check;
        /** @var \Drupal\Core\Entity\Plugin\DataType\EntityReference $entityReference */
        $entityReference = $referenceItem->get('field_type');
        /** @var \Drupal\Core\Entity\Plugin\DataType\EntityAdapter $entityAdapter */
        $id = $entityReference[0]->target_id;

        $term = \Drupal\taxonomy\Entity\Term::load($id);

        if($term){
          $name = $term->get('name')->getValue();
          /** @var \Drupal\Core\Entity\EntityInterface $referencedEntity */
          if(!empty($name)){
            $referencedEntity = $node_check;
            $referencedEntityType = $name[0]['value'];
            // Ajout de la ressource dans le tableau de son type
            $variables['ressources'][$referencedEntityType]['Entity'][$referencedEntity->nid->value][] = $referencedEntity;
            if ($check == false) {
              $variables['ressources'][$referencedEntityType]['Entity'][$referencedEntity->nid->value]['check'] = 'false';
            }
            else{
              $variables['ressources'][$referencedEntityType]['Entity'][$referencedEntity->nid->value]['check'] = 'true';
            }
          }
        }
      }
      // Vérification si toutes les ressources ne sont pas inaccessibles
      foreach ($variables['ressources'] as $key => $value) {
        foreach ($value['Entity'] as $entity) {
          if ($entity['check'] == 'true') {
            $variables['ressources'][$key]['allCheckFalse'] = 'false';
          }
        }
      }

      // Vérification si l'utilisateur est membre
      $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
      $userID = $user->uid[0]->value;
      foreach ($variables['node']->field_members as $membre) {
        if ($membre->target_id == $userID) {
          $variables['membre'] = 'membre';
        }
      }

      // Récupération des évènements du groupe de travail
      $database = \Drupal::database();
      $query = $database->query("SELECT f.entity_id FROM {node} n JOIN {node__field_groupe_de_travail} f ON f.field_groupe_de_travail_target_id = n.nid WHERE f.field_groupe_de_travail_target_id = '".$nid."'");
      $result = $query->fetchAll();
      if($result){
        $variables['evenements'] = 'oui';
      }
      break;

      case "article":
        $variables['ressources'] = array();
        $nid = $variables['node']->nid->value;
        // Récupération des ressources d'une actualité
        $database = \Drupal::database();
        $query = $database->query("SELECT f.entity_id FROM {node} n JOIN {node__field_linked_content} f ON f.field_linked_content_target_id = n.nid WHERE f.field_linked_content_target_id = '".$nid."'");
        $result = $query->fetchAll();
        $ressourcesCheck = [];

        // Début compteur des ressources inaccessibles
        $countCheckFalse = 0;
        foreach ($result as $ressource) {
          $node_check = \Drupal\node\Entity\Node::load($ressource->entity_id);
          $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());

          // Check si la ressource est insaccessible
          $check = $node_check->access('view', $user);

          $variables['ressources']['Entity'][$node_check->nid->value][] = $node_check;

          if ($check == false) {
            $variables['ressources']['Entity'][$node_check->nid->value]['check'] = 'false';
            // Incrémentation du compteur de ressources inaccessibles
            $countCheckFalse++ ;
            $variables['ressources']['count'] = $countCheckFalse;
          }
          else{
            $variables['ressources']['Entity'][$node_check->nid->value]['check'] = 'true';
          }

        }
        break;

      case "page":
        $variables['ressources'] = array();
        $nid = $variables['node']->nid->value;
        // Récupération des ressources d'une actualité
        $database = \Drupal::database();
        $query = $database->query("SELECT f.entity_id FROM {node} n JOIN {node__field_linked_content} f ON f.field_linked_content_target_id = n.nid WHERE f.field_linked_content_target_id = '".$nid."'");
        $result = $query->fetchAll();
        $ressourcesCheck = [];

        // Début compteur des ressources inaccessibles
        $countCheckFalse = 0;
        foreach ($result as $ressource) {
          $node_check = \Drupal\node\Entity\Node::load($ressource->entity_id);
          $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());

          // Check si la ressource est insaccessible
          $check = $node_check->access('view', $user);

          $variables['ressources']['Entity'][$node_check->nid->value][] = $node_check;

          if ($check == false) {
            $variables['ressources']['Entity'][$node_check->nid->value]['check'] = 'false';
            // Incrémentation du compteur de ressources inaccessibles
            $countCheckFalse++ ;
            $variables['ressources']['count'] = $countCheckFalse;
          }
          else{
            $variables['ressources']['Entity'][$node_check->nid->value]['check'] = 'true';
          }

        }
        break;
    default:
      break;
  }
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add views template suggestions.
 *
 * @inheritdoc
 */
function openig_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'views_view_unformatted__' . $variables['view']->current_display;
}

function openig_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'views_view__' . $variables['view']->current_display;
}

function openig_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if($hook === 'views_view_fields') {
    $suggestions[] = 'views_view_fields__' . $variables['view']->current_display;
  }

  if($hook === 'views_view_field') {
    $suggestions[] = 'views_view_field__' . $variables['field']->field;
  }


  if($hook === 'views_view_grid') {
    $suggestions[] = 'views_view_grid__' . $variables['view']->current_display;
  }
}

function openig_preprocess_block(&$variables){
  if($variables['elements']['#id'] == 'openig_ensavoirplussurladhesion'){
    $current_path = \Drupal::service('path.current')->getPath();
    if(substr($current_path, 0, 5) === "/node"){
      $variables['node_content'] = 'node';
    }
  }
}

function openig_preprocess_menu_local_task(&$variables){
    // Récupération des types de contenu
    $query = \Drupal::entityQuery('node');
    $condition_and = $query->andConditionGroup();
    $condition_and->condition('type', ['article', 'evenement', 'groupe_de_travail', 'page', 'service'], 'IN');
    $query->condition($condition_and);
    $query->condition('status', 1);
    $query->accessCheck(TRUE);
    $nb_resultats = $query->count()->execute();

    $variables['nbContenu'] = $nb_resultats;
}

function openig_preprocess_views_view__recherche_contenu_editorial(&$variables){
   $variables['nbContenu'] = $variables['view']->total_rows;
}

function openig_preprocess_views_view_fields__recherche_contenu_editorial(&$variables){
    if($variables['row']->_entity->type[0]->target_id === "evenement"){
        $nid = $variables['row']->_entity->nid[0]->value;
        $variables['urlCustom'] = '/l-agenda?id='.$nid;
    }
    else{
      $nid = $variables['row']->_entity->nid[0]->value;
      $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/'.$nid, $langcode);
      $variables['urlCustom'] = $alias;
    }
}

