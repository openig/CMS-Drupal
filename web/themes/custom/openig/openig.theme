<?php
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;
/**
 * @file
 * OPenIG theme file.
 */

function openig_preprocess_field__node(&$variables){
  if($variables['field_name'] == 'title'){
    // Récupération des tags au niveau du titre du contenu
    $tags = $variables['element']['#object']->field_tag;
    foreach ($tags as $tag) {
      $term = \Drupal\taxonomy\Entity\Term::load($tag->target_id);
      $variables['tags'][$term->tid[0]->value] = $term->name[0]->value;
    }
    // Utilisation d'une taxonomie pour afficher les pictos à côté des titres dans les types de contenu
    $type = $variables['element']['#bundle'];
    $pictos = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'pictos_titre', 'field_type_de_contenu' => $type]);
    if($pictos){
      $first_element = reset($pictos);
      if($first_element){
        $file_picto =  \Drupal::entityTypeManager()->getStorage('file')->load($first_element->field_picto[0]->target_id);
        $variables['picto_uri'] = $file_picto->get('uri')[0]->value;
        $variables['picto_alt'] = $first_element->field_picto[0]->alt;
      }
    }
  }
}

function openig_preprocess_page_title(&$variables) {
  $route = \Drupal::routeMatch()->getCurrentRouteMatch()->getRouteObject();
  
  $path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $path);
  $node_load = \Drupal\node\Entity\Node::load($path_args[2]);
  $type = $node_load->type->target_id;
  // Utilisation d'une taxonomie pour afficher les pictos à côté des titres dans les nodes
  if ($route->getPath() == '/node/{node}') {
    $pictos = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'pictos_titre', 'field_type_de_contenu' => $type]);
    if($pictos){
      $first_element = reset($pictos);
      if($first_element){
        $file_picto =  \Drupal::entityTypeManager()->getStorage('file')->load($first_element->field_picto[0]->target_id);
        $variables['picto_uri'] = $file_picto->get('uri')[0]->value;
        $variables['picto_alt'] = $first_element->field_picto[0]->alt;
      }
    }
  }
  
  // Utilisation d'une taxonomie pour afficher les pictos à côté des titres dans les pages user
  if (substr($route->getPath(), 0, 5) == '/user') {
    $pictos = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'pictos_titre', 'field_picto_users' => '/user']);
    if($pictos){
      $first_element = reset($pictos);
      if($first_element){
        $file_picto =  \Drupal::entityTypeManager()->getStorage('file')->load($first_element->field_picto[0]->target_id);
        $variables['picto_uri'] = $file_picto->get('uri')[0]->value;
        $variables['picto_alt'] = $first_element->field_picto[0]->alt;
      }
    }
  }

  // Utilisation d'une taxonomie pour afficher les pictos à côté des titres dans les vues

  if($route->getDefault('_controller') == 'Drupal\views\Routing\ViewPageController::handle'){
    $id = $route->getDefault('view_id');
    $pictos = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'pictos_titre', 'field_vue' => $id]);
    if($pictos){
      $first_element = reset($pictos);
      if($first_element){
        $file_picto =  \Drupal::entityTypeManager()->getStorage('file')->load($first_element->field_picto[0]->target_id);
        $variables['picto_uri'] = $file_picto->get('uri')[0]->value;
        $variables['picto_alt'] = $first_element->field_picto[0]->alt;
      }
    }
  }
}


function openig_preprocess_node(&$variables, $hook){
  $type = $variables['node']->getType();

  switch($type) {
    case "groupe_de_travail":
      $variables['ressources'] = array();
      $nid = $variables['node']->nid->value;
      // Récupération des ressources du groupe de travail
      $database = \Drupal::database();
      $query = $database->query("SELECT f.entity_id FROM {node} n JOIN {node__field_linked_content} f ON f.field_linked_content_target_id = n.nid WHERE f.field_linked_content_target_id = '".$nid."'");
      $result = $query->fetchAll();
      $ressourcesCheck = [];
      // Récupération des types de ressources
      $types = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties(['vid' => 'type_de_ressource']);
     
      // Création d'un tableau avec les types de ressources
      foreach ($types as $type) {
        $name = $type->name[0]->value;
        $variables['ressources'][$name] = [];
        ksort($variables['ressources']);
      }
      foreach ($result as $ressource) {
        $node_check = \Drupal\node\Entity\Node::load($ressource->entity_id);
        $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
        // Check si la ressource est insaccessible
        $check = $node_check->access('view', $user);

        /** @var \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $referenceItem */
        $referenceItem = $node_check;
        /** @var \Drupal\Core\Entity\Plugin\DataType\EntityReference $entityReference */
        $entityReference = $referenceItem->get('field_type');
        /** @var \Drupal\Core\Entity\Plugin\DataType\EntityAdapter $entityAdapter */
        $id = $entityReference[0]->target_id;

        $term = \Drupal\taxonomy\Entity\Term::load($id);

        if($term){
          $name = $term->get('name')->getValue();
          /** @var \Drupal\Core\Entity\EntityInterface $referencedEntity */
          if(!empty($name)){
            $referencedEntity = $node_check;
            $referencedEntityType = $name[0]['value'];
            // Ajout de la ressource dans le tableau de son type
            $variables['ressources'][$referencedEntityType]['Entity'][$referencedEntity->nid->value][] = $referencedEntity;
            if ($check == false) {  
              $variables['ressources'][$referencedEntityType]['Entity'][$referencedEntity->nid->value]['check'] = 'false';
            }
            else{
              $variables['ressources'][$referencedEntityType]['Entity'][$referencedEntity->nid->value]['check'] = 'true';
            }
          }
        }
      }
      // Vérification si toutes les ressources ne sont pas inaccessibles
      foreach ($variables['ressources'] as $key => $value) {
        foreach ($value['Entity'] as $entity) {
          if ($entity['check'] == 'true') {
            $variables['ressources'][$key]['allCheckFalse'] = 'false';
          }
        }
      }

      // Vérification si l'utilisateur est membre
      $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());    
      $userID = $user->uid[0]->value;
      foreach ($variables['node']->field_members as $membre) {
        if ($membre->target_id == $userID) {
          $variables['membre'] = 'membre';
        }
      }

      // Récupération des évènements du groupe de travail
      $database = \Drupal::database();
      $query = $database->query("SELECT f.entity_id FROM {node} n JOIN {node__field_groupe_de_travail} f ON f.field_groupe_de_travail_target_id = n.nid WHERE f.field_groupe_de_travail_target_id = '".$nid."'");
      $result = $query->fetchAll();
      if($result){
        $variables['evenements'] = 'oui';
      }
      break;
      
      case "article":
        $variables['ressources'] = array();
        $nid = $variables['node']->nid->value;
        // Récupération des ressources d'une actualité
        $database = \Drupal::database();
        $query = $database->query("SELECT f.entity_id FROM {node} n JOIN {node__field_linked_content} f ON f.field_linked_content_target_id = n.nid WHERE f.field_linked_content_target_id = '".$nid."'");
        $result = $query->fetchAll();
        $ressourcesCheck = [];
        
        // Début compteur des ressources inaccessibles
        $countCheckFalse = 0;
        foreach ($result as $ressource) {
          $node_check = \Drupal\node\Entity\Node::load($ressource->entity_id);
          $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());

          // Check si la ressource est insaccessible
          $check = $node_check->access('view', $user);

          $variables['ressources']['Entity'][$node_check->nid->value][] = $node_check;

          if ($check == false) {  
            $variables['ressources']['Entity'][$node_check->nid->value]['check'] = 'false';
            // Incrémentation du compteur de ressources inaccessibles
            $countCheckFalse++ ;
            $variables['ressources']['count'] = $countCheckFalse;
          }
          else{
            $variables['ressources']['Entity'][$node_check->nid->value]['check'] = 'true';
          }

        }
        break;

      case "page":
        $variables['ressources'] = array();
        $nid = $variables['node']->nid->value;
        // Récupération des ressources d'une actualité
        $database = \Drupal::database();
        $query = $database->query("SELECT f.entity_id FROM {node} n JOIN {node__field_linked_content} f ON f.field_linked_content_target_id = n.nid WHERE f.field_linked_content_target_id = '".$nid."'");
        $result = $query->fetchAll();
        $ressourcesCheck = [];
        
        // Début compteur des ressources inaccessibles
        $countCheckFalse = 0;
        foreach ($result as $ressource) {
          $node_check = \Drupal\node\Entity\Node::load($ressource->entity_id);
          $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());

          // Check si la ressource est insaccessible
          $check = $node_check->access('view', $user);

          $variables['ressources']['Entity'][$node_check->nid->value][] = $node_check;

          if ($check == false) {  
            $variables['ressources']['Entity'][$node_check->nid->value]['check'] = 'false';
            // Incrémentation du compteur de ressources inaccessibles
            $countCheckFalse++ ;
            $variables['ressources']['count'] = $countCheckFalse;
          }
          else{
            $variables['ressources']['Entity'][$node_check->nid->value]['check'] = 'true';
          }

        }
        break;
    default:
      break;
  }
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add views template suggestions.
 *
 * @inheritdoc
 */
function openig_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'views_view_unformatted__' . $variables['view']->current_display;
}

function openig_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'views_view__' . $variables['view']->current_display;
}

function openig_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if($hook === 'views_view_fields') {
    $suggestions[] = 'views_view_fields__' . $variables['view']->current_display;
  }

  if($hook === 'views_view_field') {
    $suggestions[] = 'views_view_field__' . $variables['field']->field;
  }


  if($hook === 'views_view_grid') {
    $suggestions[] = 'views_view_grid__' . $variables['view']->current_display;
  }
}

function openig_preprocess_block(&$variables){
  if($variables['elements']['#id'] == 'openig_ensavoirplussurladhesion'){
    $current_path = \Drupal::service('path.current')->getPath();
    if(substr($current_path, 0, 5) === "/node"){
      $variables['node_content'] = 'node';
    }
  }
  if($variables['elements']['#id'] == 'openig_lanewsletter'){
    $file = File::load($variables['content']['field_picto'][0]['#item']->target_id);
    if($file->uri[0]->value){
      $url = \Drupal::service('file_url_generator')->generateString($file->uri[0]->value);
      $variables['url_picto'] = $url;
    }
  }
}

function openig_preprocess_views_view(&$variables){
  if($variables['id'] == 'taxonomy_term'){
    $term = \Drupal\taxonomy\Entity\Term::load($variables['view_array']['#arguments'][0]);
    if ($term->vid[0]->target_id == 'outils_competences') {
      $variables['vid'] = 'outils_competences';
    }
  }
}

function openig_preprocess_views_view_fields(&$variables){
  if($variables['view']->current_display == 'annuaire'){
    $node = \Drupal\node\Entity\Node::load($variables['row']->nid);
    $membresCA = [];
    $referents = [];
    $variables['groupes'] = [];
    $variables['outils_competences'] = [];
    // Récupération des utilisateurs
    $database = \Drupal::database();
    $query = $database->query("SELECT f.entity_id FROM {node} n JOIN {user__field_structure} f ON f.field_structure_target_id = n.nid WHERE f.field_structure_target_id = '".$variables['row']->nid."'");
    $result = $query->fetchAll();
    foreach ($result as $key => $value) {
      // Vérification si un membre du CA
      $query = $database->query("SELECT f.field_ca_member_value FROM {user__field_ca_member} f  WHERE f.entity_id = '".$value->entity_id."'");
      $membresCA[] = $query->fetch()->field_ca_member_value;

      // Vérification si référent
      $query = $database->query("SELECT f.field_referent_value FROM {user__field_referent} f  WHERE f.entity_id = '".$value->entity_id."'");
      $referents[] = $query->fetch()->field_referent_value;
    }
    // Récupération des groupes de travail
    $query = $database->query("SELECT DISTINCT n.nid, n.title FROM {user__field_structure} s LEFT JOIN {node__field_members} m ON m.field_members_target_id = s.entity_id LEFT JOIN {node_field_data} n ON n.nid = m.entity_id WHERE s.field_structure_target_id = '".$variables['row']->nid."'");
    $results = $query->fetchAll();
    foreach ($results as $result) {
      if ($result->nid != null) {
        $variables['groupes'][] = $result;
      }
    }

    // Récupération des outils et compétences
    $query = $database->query("SELECT DISTINCT t.tid, t.name FROM {user__field_structure} s LEFT JOIN {user__field_outils_competences} c ON c.entity_id = s.entity_id LEFT JOIN {taxonomy_term_field_data} t ON t.tid = c.field_outils_competences_target_id WHERE s.field_structure_target_id = '".$variables['row']->nid."'");
    $results = $query->fetchAll();
    foreach ($results as $result) {
      if ($result->tid != null) {
        $variables['outils_competences'][] = $result;
      }
    }
    if (in_array(1, $membresCA)) {
      $variables['membresCA'] = 'oui';
    }
    if (in_array(1, $referents)) {
      $variables['referents'] = 'oui';
    }

    // Récupération des contacts
    $variables['contacts'] = [];
    foreach ($variables['row']->_entity->get('field_contacts') as $key => $value) {
      $user = \Drupal\user\Entity\User::load($value->target_id);
      $variables['contacts'][$value->target_id]['prenom'] = $user->get('field_firstname')->value;
      $variables['contacts'][$value->target_id]['nom'] = $user->get('field_lastname')->value;
      $variables['contacts'][$value->target_id]['mail'] = $user->get('mail')->value;
    }
  }

  if($variables['view']->current_display == 'taxonomy_term'){
    $term = \Drupal\taxonomy\Entity\Term::load($variables['view']->args[0]);
    if ($term->vid[0]->target_id == 'typologie_de_structure') {
      $variables['vid'] = 'typologie_de_structure';
      $variables['title_row'] = $variables['row']->_entity->title[0]->value;
    }
    elseif ($term->vid[0]->target_id == 'dpt_intervention') {
      $variables['vid'] = 'dpt_intervention';
      $variables['title_row'] = $variables['row']->_entity->title[0]->value;
    }
  }
}

function openig_preprocess_field(&$variables){
  if ((($variables['field_name'] == 'field_picto') and ($variables['entity_type'] == 'menu_link_content')) or (($variables['field_name'] == 'field_picto') and ($variables['element']['#bundle'] == 'membre'))) {
    $file = File::load($variables['items'][0]['content']['#item']->target_id);
    if($file->uri[0]->value){
      $url = \Drupal::service('file_url_generator')->generateString($file->uri[0]->value);
      $variables['url_picto'] = $url;
    }
  }
}

function openig_preprocess_user(&$variables){
  $database = \Drupal::database();
  // Récupération des groupes de travail
  $query = $database->query("SELECT DISTINCT n.nid, n.title FROM {node_field_data} n WHERE n.type = 'groupe_de_travail'");
  $results = $query->fetchAll();
    foreach ($results as $result) {
      if ($result->nid != null) {
        $query = $database->query("SELECT DISTINCT u.uid FROM {users_field_data} u LEFT JOIN {node__field_members} m ON m.field_members_target_id = u.uid WHERE m.entity_id = '".$result->nid."' AND u.uid = '".$variables['elements']['#user']->uid->value."'");
        $resultsuser = $query->fetchAll();

        $variables['groupes'][$result->nid]['title'] = $result->title;

        foreach ($resultsuser as $resultuser) {
          $variables['groupes'][$result->nid]['user'] = 'check';
        }
      }
    }
}